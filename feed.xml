<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>苏苏</title>
    <link href="" rel="self" />
    <link href="http://sukai.me/" />
    <updated>2016-01-25T20:30:00Z</updated>
    <id>http://sukai.me/</id>
    
    <entry>
        <title><![CDATA[把时间当作朋友]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/make-friends-with-time/"/>
        <updated>2016-01-25T20:30:00Z</updated>
        <published>2016-01-25T20:30:00Z</published>
        <id>http://sukai.me/make-friends-with-time/</id>
        <content type="html">
            <![CDATA[
             <ul>
<li> 
“<br/>
我有个朋友叫做时间。她跟我真可算作两小无猜，默默陪了二十多年我才开始真正认识她。她原本没有面孔，却因为我总是用文字为她拍照，而因此可以时常伴我左右。她原来无情，我却可以把她当做朋友，因为她曾经让我明白，后来也总是经常证明，无论做做什么事，只要我付出耐心，她就会陪我甚至帮我等到结果，并从来都将之如实交付与我，从未令我失望。<br/>
”<br/>
&ndash; 摘自：《把时间当作朋友》<br/></li>
<li> </li>
</ul>

<p>大多数人都有着相同的生活轨迹，大致都会经历：幼儿园，小学，中学，高中，大学。小时候总觉得时间过得很慢，在我们童真年龄，度过一年会觉得好漫长，因为那时候的一年是我们年龄的6，7分之1。如今，不变的时间滴滴答答走满一年，我会觉得时间变得很快，一年已缩小到是我年龄的22分之1。之后，一年将会越来越短，越来越短：1/30，1/50&hellip;  </p>

<p>回想高三时代，面临着高考升学的压力，我们总是被时间追着跑，我们都患有时间恐慌症，学习是我们的本职工作，我们每天勤奋又懒惰。勤奋是因为我们总能吃苦耐劳，总能按时早晨5：50起床，10：00结束晚自习，我们不厌其烦，认为付出会有回报。然而本质上我们还是黑暗面的自己，懒惰本性主导着我们。拿我的高中语文来说，我的阅读理解和作文得分一直很低，这也是造成我高考语文不及格的主要原因。我那时候迫于时间压力，总想着寻找捷径，一步登天，不费吹灰之力搞定语文，所以，每天都会很勤奋，很卖力地背诵语文老师总结的阅读理解大体框架，记忆议论文作文写作框架，我表面勤奋，实则懒惰  </p>

<p>越觉得时间不够用，越想一步登天，就越不肯花额外的时间静心思考，那时候的时间就是我的天敌  </p>

<p>如今，我已成为一名大四准毕业生，不管今后奔向何方，总避免不了管理时间，工作生活娱乐的时间分配，以及效率的提高，实则需要我们学会管理自己。所以，管理时间的本质还是管理自己  </p>

<p>review了《暗时间》，《程序员的思维修炼》，看的书不算少，但是进步的幅度却很小。在学习的平台期，我总是没有足够的耐心度过去，不坚持持续练习，这也是我比较严重的问题之一。这也是导致我大学四年下来，没有学成扎实的功夫，没有存储好扎实牢固的知识，一事无成的主要原因。然而大脑的天性是遗忘痛苦，那些尴尬，那些非致命性的痛苦很快就被遗忘，你便会一次次原谅自己，之后你就如“温水煮青蛙”般，永无进步。可怕的不仅次，而是你不知道的自身缺陷，“吾日三省”说的就是这个道理，反省进而发现自身那些不易察觉的，才最关键  </p>

<p>我很庆幸自己选择了计算机专业，学习该专业对自身自学能力，思考能力有着潜移默化的作用。互联网作为如今全球前沿性的热点，许多非计算机专业的人也涌入浪潮，没有自学能力和思考能力，你无法安全度过互联网的深水来到达彼岸。自学能力配合着阅读能力，检索能力，写作能力，终将铸就你超强的实践能力，这样的人才才是社会所需。互联网的技术更新很快，终生学习被提出，如果你拒绝学习，你会虚度光阴；你选择了学习，终有一天你会用上这些  </p>

<p>每看一次关于自我管理或者思维的书，总觉得自己重生了一次，这次我又将充满激情，面对未来许多的未知，一定要保持耐心，坚信时间可以证明一切：  </p>

<blockquote>
<p>我要控制自己的大脑，我要翻身作大脑的主人，与懒惰抗争，坚持反省，拒绝原谅和遗忘（使用记录尴尬提醒自己）。没有突破不了的平台期，每天坚持看一点，就没有看不完的书，坚持积累才是最根本的学习策略，积极去做无趣却很重要的工作！  </p>
</blockquote>

<hr/>

<p>PS：  </p>

<p>今日读完李笑来的《把时间当作朋友》，有感而发，遂写此博客</p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[IMDB数据库结构]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/imdb-db-structure/"/>
        <updated>2016-01-15T17:00:00Z</updated>
        <published>2016-01-15T17:00:00Z</published>
        <id>http://sukai.me/imdb-db-structure/</id>
        <content type="html">
            <![CDATA[
             <p>想要获取IMDB已上映电影的相关信息数据，我立马想到的两点就是：Restful API和爬虫，但就在我google方案的过程中，我意外收获到了其他的东西：  </p>

<p>其中一个，是使用Python语言开发的<a href="http://imdbpy.sourceforge.net/index.html">IMDbPY</a>，它的作用就是帮助开发者取回和管理IMDb的电影数据库  </p>

<p>另外一个就是，IMDB网站其实提供了所有电影的数据库镜像：<a href="http://www.imdb.com/interfaces/">http://www.imdb.com/interfaces</a>  </p>

<p>顺着IMDbPy的文档，会发现一个非常实用的脚本：<a href="http://imdbpy.sourceforge.net/docs/README.sqldb.txt">imdbpy2sql.py</a>，它的作用就是将镜像文件转换为本地的数据库  </p>

<p>第一次使用，就顺着文档<a href="http://imdbpy.sourceforge.net/docs/README.sqldb.txt">http://imdbpy.sourceforge.net/docs/README.sqldb.txt</a>一步一步来，运行完脚本后，本地数据库（我用的Mysql）会得到一些IMDB的表和数据  </p>

<p>PS：下载所需的镜像文件，并运行imdbpy2sql.py脚本，我全部写成了自动化程序：  </p>
<div class="highlight"><pre><span class="c">#!/usr/bin/env python  </span>
<span class="c"># -*- coding: utf-8 -*-  </span>

<span class="kn">import</span> <span class="nn">subprocess</span>  
<span class="kn">import</span> <span class="nn">os</span>  
<span class="kn">import</span> <span class="nn">imdb</span>  

<span class="n">location</span> <span class="o">=</span> <span class="s">&#39;./dbfiles&#39;</span>  
<span class="n">imdb_script</span> <span class="o">=</span> <span class="s">&#39;./code/bin/imdbpy2sql.py&#39;</span>  
<span class="n">base_download_url</span> <span class="o">=</span> <span class="s">&#39;ftp://ftp.fu-berlin.de/pub/misc/movies/database/&#39;</span>  
<span class="n">to_download_files</span> <span class="o">=</span> <span class="p">[</span>  
    <span class="s">&#39;movie-links.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;keywords.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;directors.list.gz&#39;</span><span class="p">,</span>  
    <span class="s">&#39;editors.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;genres.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;language.list.gz&#39;</span><span class="p">,</span>  
    <span class="s">&#39;movies.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;producers.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;production-companies.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;ratings.list.gz&#39;</span><span class="p">,</span>  
    <span class="s">&#39;writers.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;countries.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;complete-cast.list.gz&#39;</span><span class="p">]</span>  

<span class="n">mysql_ip</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span>  
<span class="n">mysql_user</span> <span class="o">=</span> <span class="s">&#39;root&#39;</span>  
<span class="n">mysql_passwd</span> <span class="o">=</span> <span class="s">&#39;1227401054&#39;</span>  
<span class="n">mysql_db</span> <span class="o">=</span> <span class="s">&#39;mrp&#39;</span>  

<span class="k">def</span> <span class="nf">download_db_files</span><span class="p">():</span>  
    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">to_download_files</span><span class="p">:</span>  
        <span class="n">url</span> <span class="o">=</span> <span class="n">base_download_url</span> <span class="o">+</span> <span class="nb">file</span>  
        <span class="k">print</span> <span class="s">&#39;Downloading &#39;</span><span class="p">,</span> <span class="n">url</span>  
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;wget&#39;</span><span class="p">,</span> <span class="s">&#39;-P&#39;</span><span class="p">,</span> <span class="n">location</span><span class="p">,</span> <span class="n">url</span><span class="p">]</span>  
        <span class="n">t_pro</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>  
        <span class="c"># block model too slow  </span>
        <span class="c">#t_pro.wait()  </span>


<span class="k">def</span> <span class="nf">trans_db_to_local</span><span class="p">():</span>  
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>  
        <span class="n">allDone</span> <span class="o">=</span> <span class="bp">True</span>  
        <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">to_download_files</span><span class="p">:</span>  
            <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">location</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="nb">file</span><span class="p">):</span>  
                <span class="c">#print &#39;need file: &#39;, location+file  </span>
                <span class="n">allDone</span> <span class="o">=</span> <span class="bp">False</span>  
                <span class="k">break</span>  
        <span class="k">if</span> <span class="n">allDone</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>  
            <span class="k">break</span>  

    <span class="k">print</span> <span class="s">&#39;Running imdbpy2sql.py begin&#39;</span>  
    <span class="c"># mysql://user:password@host/database  </span>
    <span class="n">mysql_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;mysql://&#39;</span><span class="p">,</span> <span class="n">mysql_user</span><span class="p">,</span> <span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="n">mysql_passwd</span><span class="p">,</span> <span class="s">&#39;@&#39;</span><span class="p">,</span> <span class="n">mysql_ip</span><span class="p">,</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="n">mysql_db</span><span class="p">]</span>  
    <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">imdb_script</span> <span class="o">+</span> <span class="s">&#39; -d &#39;</span> <span class="o">+</span> <span class="n">location</span> <span class="o">+</span> <span class="s">&#39; -u &#39;</span> <span class="o">+</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">mysql_list</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; --mysql-force-myisam&#39;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  
    <span class="k">print</span> <span class="s">&#39;Running imdbpy2sql.py. over&#39;</span>  


<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>  
    <span class="n">download_db_files</span><span class="p">()</span>  
    <span class="n">trans_db_to_local</span><span class="p">()</span>  

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>  
    <span class="n">run</span><span class="p">()</span>
</pre></div>

<p>下面将分析IMDB的数据库结构，从中我们可以看出IMDB数据库设计的很好，数据高度结构化，数据表无冗余（PS：说来惭愧，平时我做开发，很喜欢一张表，这样写sql语句很方便，但是缺点真的很多），  </p>

<h3>title</h3>

<p>首先，最想找的就是电影名称了吧，它存储title表里的title字段中，除此之外，title表还有些重要的信息：id和kind_id，production_year，id代表该电影的全局唯一标识，production_year表示电影上映的年份，kind_id暂时不知道，那么可以找到kind_type表，  </p>

<p>kind_type表的信息如下：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_db_kind_type.png" width="170" height="200" align="center">  </p>

<p>我需要的是电影信息，那么就对应着kind_type为1的数据  </p>

<p>以id为2459950的电影为例子吧，在title中的数据如下：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_title_table_ex.png"  height="100" align="center" />  </p>

<p>从图中可以看到select出来的结果为：id为249950的电影名为After Words，上映时间为2015年  </p>

<p>在imdb网站搜索下该电影，链接为：<a href="http://www.imdb.com/title/tt2226630/">http://www.imdb.com/title/tt2226630/</a>  </p>

<h3>movie_info</h3>

<p>之后，我需要电影相关的info，比如：countries, languages, genres, votes, rating  </p>

<p>首先涉及到的表式：movie_info，通过‘SELECT * FROM mrp.movie_info where movie_id=2459950;’，得到上面‘After Words’电影的相关信息如下：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_movie_info_ex.png" width="700" height="150" align="center" />  </p>

<p>其中info_type_id不是很明白，找到info_type表，里面解释着各个id代表的含义：  </p>

<ul>
<li>id为3代表genres<br/></li>
<li>id为8代表countries<br/></li>
<li>id为4代表languages<br/></li>
</ul>

<p>结合截图select的结果，得知&#39;After Words&#39;的countries为USA，genres为Drama，languages为English  </p>

<h3>movie_info_id</h3>

<p>还有一些相关的info在movie_info_idx中，通过‘SELECT * FROM mrp.movie_info_idx where movie_id=2459950;’，得到如下结果：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_movie_info_idx_ex.png" width="680" height="150" align="center">  </p>

<p>相应的：  </p>

<ul>
<li>info_type_id为99代表votes distribution（这个数据值我暂时没搞懂）<br/></li>
<li>info_type_id为100代表votes<br/></li>
<li>info_type_id为101代表rating<br/></li>
</ul>

<h3>movie_keywords</h3>

<p>需要查找电影的keywords信息，就需要用到movie_keywords表了。‘SELECT * FROM mrp.movie_keyword where movie_id=2459950;’：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/movie_keywords_ex.png" width="350" height="200" align="center" />  </p>

<p>这样就可以找到电影所有的keywords_id，然后使用keywords_id去keywords表中寻找具体的值，即可：  </p>

<p>比如‘SELECT * FROM mrp.keyword where id=37348’得到的具体值为：costa-rica，这个和imdb官网是符合的，是正确的！  </p>

<h3>cast_info</h3>

<p>下面我们来找一下cast_info：cast, editor, writer, director, producer等，这些信息当然是在cast_info表中了，‘SELECT * FROM mrp.cast_info where movie_id=2459950;’:  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/cast_info_ex.png" width="700" height="700" align="center" />  </p>

<p>里面同样有个role_id，查阅role_type表：  </p>

<ul>
<li>role_id为1和2，分别代表actor和actress<br/></li>
<li>role_id为3，代表producer<br/></li>
<li>role_id为4，代表writer<br/></li>
<li>role_id为8，代表director<br/></li>
<li>rile_id为9，代表editor<br/></li>
</ul>

<p>那么如何找到具体的人名呢？通过person_id和name表，不多说，你可以试一下，再对照官网，可以发现信息是完全吻合的  </p>

<h3>movie_companies</h3>

<p>下面我们来找一下电影的production_companies，涉及到表为movie_companies，‘SELECT * FROM mrp.movie_companies where movie_id=2459950;’，之后会得到company_id  </p>

<p>拿着company_id去company_name里面即可找到具体公司名  </p>

<p>这里不再累述  </p>

<h3>额外信息</h3>

<p>还有一些额外的信息我需要知道：有关评分的信息，包括1~10评分的分布，女性评分占多少，男性多少，年龄段评分多少等等  </p>

<p>如<a href="http://www.imdb.com/title/tt2226630/ratings?ref_=tt_ov_rt">http://www.imdb.com/title/tt2226630/ratings?ref_=tt_ov_rt</a>所示  </p>

<p>方法是通过Imdbpy这个开源库里面的一个核心的函数：update，来完成（感谢东南大学杨远溢同学），他在这方面已经研究出方案了，我只需要站在他的基础上，编写程序即可  </p>

<p>实例程序如下：（搜索&quot;A Father&#39;s Journey&quot;电影，并获取评分信息）  </p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">imdb</span>  

<span class="k">def</span> <span class="nf">init_db</span><span class="p">():</span>  
    <span class="n">title</span> <span class="o">=</span> <span class="s">&quot;A Father&#39;s Journey&quot;</span>  
    <span class="n">ia</span> <span class="o">=</span> <span class="n">imdb</span><span class="o">.</span><span class="n">IMDb</span><span class="p">()</span>  
    <span class="n">s_result</span> <span class="o">=</span> <span class="n">ia</span><span class="o">.</span><span class="n">search_movie</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>  
    <span class="sd">&#39;&#39;&#39;  </span>
<span class="sd">    for item in s_result:  </span>
<span class="sd">        print item[&#39;title&#39;]  </span>
<span class="sd">    &#39;&#39;&#39;</span>  
    <span class="n">the_unt</span> <span class="o">=</span> <span class="n">s_result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  
    <span class="n">ia</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">the_unt</span><span class="p">,</span> <span class="n">info</span><span class="o">=</span><span class="p">(</span><span class="s">&#39;vote details&#39;</span><span class="p">))</span>  
    <span class="k">if</span> <span class="n">the_unt</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;rating&#39;</span><span class="p">):</span>  
        <span class="k">print</span> <span class="n">the_unt</span><span class="p">[</span><span class="s">&#39;rating&#39;</span><span class="p">]</span>  
    <span class="k">if</span> <span class="n">the_unt</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;number of votes&#39;</span><span class="p">):</span>  
        <span class="n">number_votes</span> <span class="o">=</span> <span class="n">the_unt</span><span class="p">[</span><span class="s">&#39;number of votes&#39;</span><span class="p">]</span>  
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>  
            <span class="k">print</span> <span class="s">&#39;R&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="n">number_votes</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>  
    <span class="k">if</span> <span class="n">the_unt</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;demographic&#39;</span><span class="p">):</span>  
        <span class="n">infos</span> <span class="o">=</span> <span class="p">[</span>  
            <span class="s">&#39;males&#39;</span><span class="p">,</span> <span class="s">&#39;females&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged under 18&#39;</span><span class="p">,</span> <span class="s">&#39;males under 18&#39;</span><span class="p">,</span> <span class="s">&#39;females under 18&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged 18-29&#39;</span><span class="p">,</span> <span class="s">&#39;males aged 18-29&#39;</span><span class="p">,</span> <span class="s">&#39;females aged 18-29&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged 30-44&#39;</span><span class="p">,</span> <span class="s">&#39;males aged 30-44&#39;</span><span class="p">,</span> <span class="s">&#39;females aged 30-44&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged 45+&#39;</span><span class="p">,</span> <span class="s">&#39;males aged 45+&#39;</span><span class="p">,</span> <span class="s">&#39;females aged 45+&#39;</span><span class="p">,</span>  
            <span class="s">&#39;imdb staff&#39;</span><span class="p">,</span> <span class="s">&#39;top 1000 voters&#39;</span><span class="p">,</span>  
            <span class="s">&#39;us users&#39;</span><span class="p">,</span><span class="s">&#39;non-us users&#39;</span>  
        <span class="p">]</span>  
        <span class="n">demo_value</span> <span class="o">=</span> <span class="n">the_unt</span><span class="p">[</span><span class="s">&#39;demographic&#39;</span><span class="p">]</span>  
        <span class="k">print</span> <span class="s">&#39;get&#39;</span>  
        <span class="k">for</span> <span class="n">in_fo</span> <span class="ow">in</span> <span class="n">infos</span><span class="p">:</span>  
            <span class="k">if</span> <span class="n">demo_value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">in_fo</span><span class="p">)</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="k">print</span> <span class="n">in_fo</span><span class="p">,</span> <span class="n">demo_value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">in_fo</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">demo_value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">in_fo</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</pre></div>

<h3>总结</h3>

<p>IMDB提供数据的方式确实很独特，通过镜像的方式。通过分析所有的表结构，不难发现imdb数据库设计之好  </p>

<p>好了，截止目前，imdb的未上映和已上映电影数据就都可以拿到了  </p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[IMDB电影数据库]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/imdb-movies-crawl/"/>
        <updated>2016-01-15T12:00:00Z</updated>
        <published>2016-01-15T12:00:00Z</published>
        <id>http://sukai.me/imdb-movies-crawl/</id>
        <content type="html">
            <![CDATA[
             <p>IMDB拥有着全球最大的电影数据库，最近我也在研究如何获取到这些宝贵的电影数据资源  </p>

<p>根据时间来划分，可以将所有的电影分为：已上映和未上映。下面我将分这两种情况，分别去寻找方案  </p>

<h3>未上映电影数据</h3>

<p>在IMDB官网，我找到了一些有趣的页面：<a href="http://www.imdb.com/movies-coming-soon/2016-01">http://www.imdb.com/movies-coming-soon/2016-01</a>，<a href="http://www.imdb.com/movies-coming-soon/2016-02">http://www.imdb.com/movies-coming-soon/2016-02</a>等等，通过分析url很容易发现：  </p>

<p>url中的&#39;movies-coming-soon&#39;表示该页面的电影即将上映至影院，后面的日期为2016-xx，代表着该页面的电影预计2016年xx月上映  </p>

<p>这样的话，我们就可以找到2016一整年的预映电影的入口页面  </p>

<p>随意进入任何一个入口页面，里面陈列着该日期下所有预映电影的简短信息，包括指向某具体电影详情页面的link，随意点击某部电影，进入并得到link，比如：<a href="http://www.imdb.com/title/tt3460252/?ref_=cs_ov_tt">http://www.imdb.com/title/tt3460252/?ref_=cs_ov_tt</a>  </p>

<p>其中?ref<em>=cs_ov_tt是多余的，可以省略，于是link精简为：<a href="http://www.imdb.com/title/tt3460252">http://www.imdb.com/title/tt3460252</a>，‘?ref</em>=cs_ov_tt’只是代表某些跳转信息（我猜的）  </p>

<p>进入到电影详情页面，我们就可以抓取一切我们想要的数据了，原理很简单：  </p>

<p>模拟http请求，然后解析HTML DOM树，主要用到了Python的request库和beautifulSoup4库，我还用到了阻塞队列Queue和多线程，解析电影详情页面的线程代码如下：  </p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">detail_thread</span><span class="p">():</span>  
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>  
        <span class="k">try</span><span class="p">:</span>  
            <span class="n">m_url</span> <span class="o">=</span> <span class="n">movie_url</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>  
            <span class="k">print</span> <span class="s">&#39;detail_thread fetch: &#39;</span><span class="p">,</span> <span class="n">m_url</span>  
            <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">m_url</span><span class="p">)</span>  
            <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>  
            <span class="n">nMovie</span> <span class="o">=</span> <span class="n">newMovie</span><span class="p">()</span>  

            <span class="c"># id  </span>
            <span class="n">nMovie</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">m_url</span><span class="p">[</span><span class="n">m_url</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s">&#39;/tt&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="p">:]</span>  
            <span class="c"># year  </span>
            <span class="n">nMovie</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">year</span>  

            <span class="c"># title  </span>
            <span class="n">nMovie</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h1&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;header&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;name&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">text</span>  

            <span class="n">title_details</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;div&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="s">&#39;titleDetails&#39;</span><span class="p">})</span>  
            <span class="n">txt_block</span> <span class="o">=</span> <span class="n">title_details</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;div&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;txt-block&#39;</span><span class="p">})</span>  
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">txt_block</span><span class="p">:</span>  
                <span class="k">try</span><span class="p">:</span>  
                    <span class="c"># countries  </span>
                    <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">&#39;Country:&#39;</span><span class="p">:</span>  
                        <span class="n">c_links</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">c_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                            <span class="n">country</span> <span class="o">=</span> <span class="n">c_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">c_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                                <span class="n">country</span> <span class="o">=</span> <span class="n">country</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">text</span>  
                            <span class="n">nMovie</span><span class="o">.</span><span class="n">countries</span> <span class="o">=</span> <span class="n">country</span>  
                    <span class="c"># languages  </span>
                    <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">&#39;Language:&#39;</span><span class="p">:</span>  
                        <span class="n">l_links</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">l_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                            <span class="n">lan</span> <span class="o">=</span> <span class="n">l_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                            <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">l_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                                <span class="n">lan</span> <span class="o">=</span> <span class="n">lan</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">l</span><span class="o">.</span><span class="n">text</span>  
                            <span class="n">nMovie</span><span class="o">.</span><span class="n">languages</span> <span class="o">=</span> <span class="n">lan</span>  
                    <span class="c"># production_companies  </span>
                    <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">&#39;Production Co:&#39;</span><span class="p">:</span>  
                        <span class="n">p_c_links</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p_c_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                            <span class="n">p_companies</span> <span class="o">=</span> <span class="n">p_c_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                            <span class="k">for</span> <span class="n">p_c</span> <span class="ow">in</span> <span class="n">p_c_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                                <span class="n">p_companies</span> <span class="o">=</span> <span class="n">p_companies</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">p_c</span><span class="o">.</span><span class="n">text</span>  
                            <span class="n">nMovie</span><span class="o">.</span><span class="n">production_companies</span> <span class="o">=</span> <span class="n">p_companies</span>  
                <span class="k">except</span><span class="p">:</span>  
                    <span class="k">continue</span>  
                    <span class="c">#print &#39;detail_thread: txt_block find no h4 tag&#39;  </span>

            <span class="c"># keywords  </span>
            <span class="n">keywords</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;keywords&#39;</span><span class="p">,</span> <span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">})</span>  
            <span class="c">#print m_url, &#39; keywords:&#39;, len(keywords)  </span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">keywords</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                <span class="n">key_words</span> <span class="o">=</span> <span class="n">keywords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keywords</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                    <span class="n">key_words</span> <span class="o">=</span> <span class="n">key_words</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">k</span><span class="o">.</span><span class="n">text</span>  
                <span class="n">nMovie</span><span class="o">.</span><span class="n">keywords</span> <span class="o">=</span> <span class="n">key_words</span>  

            <span class="c"># genres  </span>
            <span class="n">genres_div</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;see-more inline canwrap&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;genre&#39;</span><span class="p">})</span>  
            <span class="k">if</span> <span class="n">genres_div</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="n">g_links</span> <span class="o">=</span> <span class="n">genres_div</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                <span class="c">#print m_url, &#39; genres:&#39;, len(g_links)  </span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">g_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                    <span class="n">genres</span> <span class="o">=</span> <span class="n">g_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">g_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                        <span class="n">genres</span> <span class="o">=</span> <span class="n">genres</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">g</span><span class="o">.</span><span class="n">text</span>  
                    <span class="c">#print genres  </span>
                    <span class="n">nMovie</span><span class="o">.</span><span class="n">genres</span> <span class="o">=</span> <span class="n">genres</span>  

            <span class="c"># cast  </span>
            <span class="n">cast_td</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;actor&#39;</span><span class="p">})</span>  
            <span class="c">#print m_url, &#39; cast:&#39;, len(cast_td)  </span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">cast_td</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                <span class="n">casts</span> <span class="o">=</span> <span class="n">cast_td</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;name&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">text</span>  
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cast_td</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                    <span class="n">casts</span> <span class="o">=</span> <span class="n">casts</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;name&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">text</span>  
                <span class="c">#print casts  </span>
                <span class="n">nMovie</span><span class="o">.</span><span class="n">cast</span> <span class="o">=</span> <span class="n">casts</span>  

            <span class="c"># ??  </span>
            <span class="c"># editor  </span>
            <span class="c"># producer  </span>

            <span class="c"># writer  </span>
            <span class="n">w_div</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;txt-block&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;creator&#39;</span><span class="p">})</span>  
            <span class="k">if</span> <span class="n">w_div</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="n">w_links</span> <span class="o">=</span> <span class="n">w_div</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                <span class="c">#print m_url, &#39; writer:&#39;, len(w_links)  </span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">w_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                    <span class="n">writer</span> <span class="o">=</span> <span class="n">w_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">w_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                        <span class="n">writer</span> <span class="o">=</span> <span class="n">writer</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">w</span><span class="o">.</span><span class="n">text</span>  
                    <span class="n">nMovie</span><span class="o">.</span><span class="n">writer</span> <span class="o">=</span> <span class="n">writer</span>  
                <span class="c">#print nMovie.writer  </span>

            <span class="c"># director  </span>
            <span class="n">d_div</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;txt-block&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;director&#39;</span><span class="p">})</span>  
            <span class="k">if</span> <span class="n">d_div</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="n">d_links</span> <span class="o">=</span> <span class="n">d_div</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                <span class="c">#print m_url, &#39; director:&#39;, len(d_links)  </span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">d_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                    <span class="n">director</span> <span class="o">=</span> <span class="n">d_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">d_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                        <span class="n">director</span> <span class="o">=</span> <span class="n">director</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">d</span><span class="o">.</span><span class="n">text</span>  
                    <span class="n">nMovie</span><span class="o">.</span><span class="n">director</span> <span class="o">=</span> <span class="n">director</span>  

            <span class="n">entities</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">nMovie</span><span class="p">)</span>  
            <span class="n">movie_url</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>  
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>  
            <span class="k">print</span> <span class="s">&#39;detail_thread: An {} exception occured&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</pre></div>

<p>当然，在运行detail_thread这个线程之前，肯定要开启另外一个线程，作用是将所有电影详情页面的url放入movie_url这个Queue中，否则，detail_thread永远阻塞至死。所以，总的来设计，我运用了多线程+多队列搭建起了‘多级生产者和消费者’模型：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_new_movie_crawl_model.png" width="400" height="400" align="center" />  </p>

<p>index_thread生产所有入口页面，放入index_url阻塞队列；movie_thread从index_url队列取入口页面，生产电影详情页面url，放入movie_url；detail_thread从movie_url获取link，解析生成nMovie的实体，实体中保存着有关电影的详细信息，放入entitie队列；最后交由db_thread做入库持久化操作  </p>

<p>运行时，可以视实际运行快慢，给其中的某些线程增加数量，增快其运行速度  </p>

<p>总的代码，可以查看我的<a href="https://github.com/su-kaiyao/mrp/blob/master/dataSet/newMovieCrawl.py">Github&gt;newMovieCrawl.py</a>  </p>

<p>我自己运行了一把，抓了141条新电影，查阅了所有入口页面（2016-01 ~ 2016-12），数了数是145个，少了4个，是因为那4个电影的详细信息太少了，被脚本过滤了  </p>

<h3>已上映电影数据</h3>

<p>移步：<a href="http://sukai.me/imdb-db-structure/">IMDB数据库结构</a>  </p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[Shadowsocks科学上网]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/shadowsocks/"/>
        <updated>2016-01-05T14:00:00Z</updated>
        <published>2016-01-05T14:00:00Z</published>
        <id>http://sukai.me/shadowsocks/</id>
        <content type="html">
            <![CDATA[
             <p>GFW，想必大家都不陌生  </p>

<p>针对GFW，渴求真理和自由的程序员们绞尽脑汁，创造出了许多梯子工具。本人在大二的时候尝试翻墙，用过免费VPN，用过GoAgent等等，这些都不算是自食其力式梯子，直到后来了解到了Shadowsocks，提到Shadowsocks，大家一定不陌生这句话：<strong>“Removed according to regulations.”</strong>  </p>

<p>当然，我在写这篇文章之前，已经使用Shadowsocks快一年了，见证了ss从未封杀到被封杀。写这篇文章，是因为：  </p>

<ul>
<li>1.翻墙对我很重要，我要将“Shadowsocks科学上网”的方案备份下来，我的生活已离不开翻墙<br/></li>
<li>2.这几天很多人问我借ss账号，我有必要告诉他人如何科学上网<br/></li>
</ul>

<p>申明：扯了那么多，我其实并不会讲如何利用shadowsocks科学上网，因为这些教程随意Google一大堆（当然，Baidu是不可以的，因为根据相关法律&hellip;&hellip;）。可能你们又会说，我既然不能翻墙，我怎么google，这不是一个死循环吗？ok，我直接贴出一篇教程出来：  </p>

<p><a href="http://www.findspace.name/res/956">FindSpace：SHADOWSOCKS科学上网</a>  </p>

<p>FindeSpace是我的博客友链，我当时也是因为搜索到了Findspace的教程，搞定了ss，和他交了朋友  </p>

<p>所以，当时，按照他的教程：  </p>

<p>我在host1plus上买了一个最最便宜的vps（美国洛杉矶节点），一个月10+RMB，然后在vps上装了ubuntu系统，ssh上去安装了python和shadowsocks（pip install），最后编写了json格式的配置文件，并使用nohup ssserver命令在后台启动服务。 最后在本地也同样安装shadowsocks，以及配置配置文件，使用sslocal启动服务。 我是为了翻墙才买的vps，所以，最终用firefox代理插件，配置本地的shadowsocks代理端口，即可科学上网了（现在换了MAC，不需要任何代理插件了，也不需要命令行启动ss客户端了）。 需要说明的是，ios和android都是有shadowsocks客户端的，所以，科学上网不仅限于PC机端。还有，买个vps跑个shadowsocks，未免太浪费了，还可以跑跑其他程序的，很多人都用vps建站搭博客等。 前前后后不到一小时搞定  </p>

<p>再给大家列举一些资源列表：  </p>

<ul>
<li><a href="https://github.com/Long-live-shadowsocks">long-live-shadowsocks</a>：仅仅用来备份 shadowsocks 相关项目（re-uploaded because I can）<br/></li>
</ul>

<p>这个仓库很强大，ios，android，mac，win的ss客户端都有，快去下载吧  </p>

<p>Best Wishes!!</p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[再见，2015！你好，2016]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/bye-2015-hello-2016/"/>
        <updated>2015-12-26T15:00:00Z</updated>
        <published>2015-12-26T15:00:00Z</published>
        <id>http://sukai.me/bye-2015-hello-2016/</id>
        <content type="html">
            <![CDATA[
             <h3>一. 再见，2015</h3>

<h4>生病</h4>

<p>我的2015年是从生病开始的，准确的说，我的2014年是以生病结束的。2014年11月底，身上莫名其妙地出现许多出血点，经过两三家医院的确认，是过敏性紫癜  </p>

<p>印象中，从2014.11~2015.4，一直在喝中药，因为过敏性紫癜的西医治方就是强的松等激素，我一开始尝试了一个多月，效果很快，但治标不治本，很容易反弹。所以，2015年寒假，我第一次没有留校做项目，回家尝试中药治疗  </p>

<p>总而言之，我觉得：刚生病那会，及时的药物治疗非常重要，到了后期，药物治疗为辅，心态治疗为主，一个好的心态才是根本  </p>

<p>最近也经常看到网络上各种程序猿猝死的新闻，想在这里提醒广大同行的程序猿：爱惜自己  </p>

<h4>实习面试</h4>

<p>2015年4~6月那会，周围的同学都在忙着寻找暑期实习。我投的公司不多，期初只投了知名的阿里和腾讯。两者全部止步在了笔试，前者参加了笔试，后面并没有收到面试通知；后者我直接放弃了笔试。最后，投了同程旅游，拿到了暑期实习offer。在我拿到同程旅游的offer之后，收到了360的内推邀请，那时，我也做出了保研的决定，也没有尝试360，因为我知道我的水平有限，而且我的暑期肯定会选择一个离苏州最近的实习单位，因为我还要忙保研的事情  </p>

<h4>实习</h4>

<p>2015.7.13左右，加入同程旅游，工号已经到了17000多，那是我觉得自己最有钱的一段时间，每天200的工资，而且同程旅游办公地点的对面就是我们苏州大学独墅湖校区，所以不必去公司楼下的快餐店吃昂贵的午餐，可以去食堂吃，而且同程旅游给实习生安排了免费的住宿  </p>

<p>当时加入同程旅游的还有我的其余一些小伙伴，我在那边度过了一段有钱且开心的日子  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/ly-03.jpg" alt=""/>  </p>

<p>当时和我合作的是比我大一届的正式员工，他叫杨鑫，感谢他给我的一些指导和帮助，离职的时候，我也加了他的微信  </p>

<h4>保研</h4>

<p>2015.8从同程旅游离职，8~9月参加了2个学校的保研面试，2015.10月中旬，提交了保研志愿，保研结束了，最终保送到了东南大学计算机科学与工程学院，研究方向：AI  </p>

<h4>保研之后</h4>

<ul>
<li>在coursera上学完吴恩达的ML公开课，开始入门机器学习<br/></li>
<li>再为本科实验室一个项目写了一个后台程序<br/></li>
<li>开始刷题<br/></li>
<li>玩玩玩<br/></li>
</ul>

<h3>二. 你好，2016</h3>

<p>再过几天，元旦了，又将迎来崭新的一年  </p>

<p>生活和工作都不能稀里糊涂，2016年里，我先给自己定一些清单：  </p>

<ul>
<li>毕设：认认真真完成毕设，这是我在研究生实验室的首秀，希望别搞砸，争取省级优秀<br/></li>
<li>读书：2015年，我读了64本书；2016年争取达到李开复老师所说的一年100本，每天再忙也要在多看上读至少50页书<br/></li>
<li>算法：多刷题，多看算法，就先从leetcode开始<br/></li>
<li>paper：论文就先从导师给的tutorial开始<br/></li>
<li>公开课：多看ted，主要涉及cs这块，而非编程语言和软件开发这块<br/></li>
<li>英语：拒绝百度，使用google搜索高质量英文文章，可以用英文写写段子（每天背单词？这个我做不到）<br/></li>
<li>锻炼：一步一步恢复体育锻炼，找回曾经那个阳光帅气的自己（过敏性紫癜不能剧烈运动）<br/></li>
<li>体重：2016年争取到120斤<br/></li>
<li>效率：熟练使用mac，vim，shell，Alfred。熟练使用神器，能帮助你提高工作效率<br/></li>
<li>其余目标视具体项目或者课程情况而定，拥抱变化<br/></li>
<li>继续保持着积极乐观，提高自控力，多思考，多成长<br/></li>
</ul>

<p>暂且这么多，希望自己能完成  </p>

            ]]>
        </content>
    </entry>
    
</feed>