<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>苏苏</title>
    <link href="" rel="self" />
    <link href="http://sukai.me/" />
    <updated>2016-03-27T20:30:00Z</updated>
    <id>http://sukai.me/</id>
    
    <entry>
        <title><![CDATA[GIL:Python多线程模型的核心]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/python-multi-thread-model/"/>
        <updated>2016-03-27T20:30:00Z</updated>
        <published>2016-03-27T20:30:00Z</published>
        <id>http://sukai.me/python-multi-thread-model/</id>
        <content type="html">
            <![CDATA[
             <h3>前言</h3>

<p>很久之前就时常听说Python GIL问题，有关这方面的资料一直没有认真整理下来，比较容易遗忘。最近在网上瞄到GIL相关字眼，既然GIL是python多线程模型的核心，那么不如趁此机会好好总结一次（内容非原创分析，主要参考《Python源码分析》一书）  </p>

<p>首先，GIL是什么，不多说。<a href="http://cenalulu.github.io/python/gil-in-python/" title="gil-in-python" target="_blank">Python的GIL是什么鬼，多线程性能究竟如何</a>  </p>

<p>总而言之，在python中，同一时间只有一个线程能访问Python C API，能执行机器码  </p>

<p>如何绕过GIL，或者说如何提高Python多核的利用效率，也有很多些文章总结得很好了，请读者移步。<a href="http://zhuoqiang.me/python-thread-gil-and-ctypes.html" target="_blank">python 线程，GIL 和 ctypes</a>  </p>

<p>下面将围绕线程的创建，调度，状态保护机制等方面，并结合GIL谈谈对python多线程模型的认识  </p>

<h3>Python中线程的调度机制</h3>

<p>线程的调度机制主要解决两方面问题：  </p>

<ul>
<li>1.何时挂起当前线程，选择下一个处于等待状态的线程？<br/></li>
<li>2.选择激活哪一个等待状态中的线程？<br/></li>
</ul>

<p>问题1，即线程的调度问题，python中主要采用标准调度和阻塞调度两种方式  </p>

<h4>标准调度</h4>

<p>Python通过软件模拟时钟中断来激活调度。时钟中断是指：每个线程执行到第N条指令时，将释放GIL，引起线程调度  </p>

<p>N可以通过<code>sys.getcheckintercal()</code>获取  </p>

<h4>阻塞调度</h4>

<p>若当前线程通过等待输入，睡眠等方法将自身阻塞，那么python就将等待GIL的其余线程唤醒，进行一次调度  </p>

<p>阻塞调度是不会重置前一个执行线程的指令执行计数的  </p>

<p>那么对于问题2，python是直接将调度权利交由操作系统，由操作系统的线程调度机制决定，至于选择谁，天知道呢  </p>

<p>也由此可以看出，Python的线程调度和os的线程调度的粘合关键就是GIL  </p>

<h3>Python线程的创建</h3>

<p>当用户创建线程时，python才会初始化多线程环境（主要就是创建GIL以及支持多线程的数据结构）。所以，python启动后，并不支持多线程，那些支持多线程的数据结构以及GIL都未被创建  </p>

<p>采用这种方式的原因也是合理的：倘若激活了多线程机制，即多线程环境已初始化，那么N条指令之后，Python虚拟机都会同样激活一次调度，这对于单线程的程序是完全没有必要的。生活和工作中，当然还是单线程的脚本程序多一些，所以，完全没有必要一开始就激活多线程机制，而是有用户程序自行决定  </p>

<h3>Pyhton中线程的状态保护和线程切换</h3>

<p>线程调度必然引起线程的切换，以及线程上下文的保护和恢复。Python中如何存储线程的状态（上下文）呢？  </p>

<p>答案是：每一个线程都会有一个线程状态对象与之对应，该对象是一个C 结构体，记录着有关线程所独有的一些信息：比如线程id等等  </p>

<p>所有线程的全部这些状态对象通过单向链表的方式组合起来，Python虚拟机只需要遍历链表，即可获取相关信息  </p>

<h3>后续</h3>

<p>基于这么些的线程模型，Python封装出了两个线程类库：Thread和Threading。前者由C实现，提供的接口很少，后者则为方便用户使用，属于更高层的接口  </p>

<hr/>

<p>参考：  </p>

<ul>
<li>《Python源码分析》<br/></li>
<li><a href="http://zhuoqiang.me/python-thread-gil-and-ctypes.html" target="_blank">python 线程，GIL 和 ctypes</a><br/></li>
<li><a href="http://cenalulu.github.io/python/gil-in-python/" title="gil-in-python" target="_blank">Python的GIL是什么鬼，多线程性能究竟如何</a></li>
</ul>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[Alfred使用指南]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/alfred-user-guide/"/>
        <updated>2016-01-26T15:30:00Z</updated>
        <published>2016-01-26T15:30:00Z</published>
        <id>http://sukai.me/alfred-user-guide/</id>
        <content type="html">
            <![CDATA[
             <p>Alfred是公认MAC端的神兵利器，它不仅是快速搜索工具，快速启动工具，甚至还能操作许多系统的功能。熟练使用之，完全可以抛弃鼠标，再结合MAC超强的触摸板，能节省许多时间，并提高效率  </p>

<p>今日Google之，搜索出许多详细的教程，深深感叹其高效牛逼。我参考的教程是：  </p>

<ul>
<li><a href="http://wellsnake.com/jekyll/update/2014/06/15/001/">《丢掉鼠标－Mac神软Alfred使用手册1》</a><br/></li>
<li><a href="http://wellsnake.com/jekyll/update/2014/08/16/001/">《杀手级功能WorkFlows介绍(1)-Alfred使用手册2》</a><br/></li>
</ul>

<h3>一. Alfred免费版feature</h3>

<p>看完上面的第一条链接，对于Alfred所有免费的feature就能全部掌握了，所有免费的feature有：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/alfred-free-feature.png" alt="alfred-free-feature"/>  </p>

<p>功能不多说，上面的第一条链接介绍的很全面了。我记忆犹新的功能是：File Search&amp;&amp;Web Search  </p>

<h3>二. Alfred收费的WorkFlows</h3>

<p>WorkFlows是Alfred的核心功能，只有亲身用之，才能体会到无比的强大。其核心理念是：  </p>

<p><strong>From quick file filters to advanced scripts, you can control your Mac, other applications, web services and more.</strong>  </p>

<p>我们大可不必搞清WorkFlows的原理，对于小白用户，已经有一个收集平台为我们收集了所有可用的WorkFlow：<a href="http://www.alfredworkflow.com/">http://www.alfredworkflow.com/</a>  </p>

<p>比如，前往该平台网站，下载了我最想扩展的“搜索豆瓣电影、图书、音乐”功能：<strong>Douban (豆瓣)</strong>，下载下来的文件是：“Douban.alfredworkflow”，双击安装并import即可使用，使用效果如下：  </p>

<p>我使用“book 机器学习实战”，来控制我的MAC去<a href="http://book.douban.com">http://book.douban.com</a>搜索《机器学习实战》这本书，之后MAC会使用默认浏览器打开《机器学习实战》的douban链接  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/douban-alfred-workflow.png" alt="douban-alfred-workflow"/>  </p>

<p>除此之外，还有很多优秀的WorkFlow供你选择，你能想到的基本都已经有了，你会感叹到程序猿真的是这个世界上伟大的动物  </p>

<p>当然，你突然想到某个新颖的功能，想开发自己的WorkFlow，这也不是什么难事，难得是一个好的idea。WorkFlows可以通过用户自己写脚本语言来定制搜索和其它一些高级功能，其支持bash、zsh、php、ruby、python、perl、osascript等脚本语言，具体的这篇文章不介绍了，自行Google吧  </p>

<hr/>

<p>参考资料：  </p>

<ul>
<li><a href="http://sspai.com/27854">少数派.Alfred的5个实用扩展推荐（一）</a><br/></li>
<li><a href="http://sspai.com/27929">少数派.Alfred的5个实用扩展推荐（二）</a></li>
</ul>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[把时间当作朋友]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/make-friends-with-time/"/>
        <updated>2016-01-25T20:30:00Z</updated>
        <published>2016-01-25T20:30:00Z</published>
        <id>http://sukai.me/make-friends-with-time/</id>
        <content type="html">
            <![CDATA[
             <blockquote>
<p>“<br/>
    我有个朋友叫做时间。她跟我真可算作两小无猜，默默陪了二十多年我才开始真正认识她。她原本没有面孔，却因为我总是用文字为她拍照，而因此可以时常伴我左右。她原来无情，我却可以把她当做朋友，因为她曾经让我明白，后来也总是经常证明，无论做什么事，只要我付出耐心，她就会陪我甚至帮我等到结果，并从来都将之如实交付与我，从未令我失望。<br/>
”<br/>
&ndash; 摘自：《把时间当作朋友》.李笑来  </p>
</blockquote>

<p>大多数人都有着相同的生活轨迹，大致都会经历：幼儿园，小学，中学，高中，大学。小时候总觉得时间过得很慢，在我们童真年龄，度过一年会觉得好漫长，因为那时候的一年是我们年龄的6，7分之1。如今，不变的时间滴滴答答走满一年，我会觉得时间流逝得很快，一年缩短至我年龄的22分之1。之后，一年的长度将会越来越短，越来越短：1/30，1/50&hellip;maybe 1/100  </p>

<p>回想高三时代，面临着高考升学的压力，我们总是被时间追着跑，我们都患有时间恐慌症，学习是我们的本职工作，我们每天勤奋却又懒惰。勤奋是因为我们总能吃苦耐劳，总能按时早晨5：50起床，10：00结束晚自习，我们不厌其烦，认为付出会有回报。然而本质上我们还是黑暗面的自己，懒惰本性主导着我们。拿我的高中语文来说，我的阅读理解和作文得分一直很低，这也是造成我高考语文不及格的主要原因。我那时候迫于时间压力，总想着寻找捷径，不费吹灰之力搞定语文，所以，每天都会很勤奋，很卖力地背诵语文老师总结的阅读理解答题框架，议论文作文写作框架，我表面勤奋，实则却懒惰，因为我不肯付出时间思考和总结，不肯抬头看路  </p>

<p>越觉得时间不够用，越想一步登天，就越不肯花额外的时间静心思考，那时候的时间就是我的天敌  </p>

<p>如今，我已成为一名大四准毕业生，不管今后奔向何方，总避免不了管理时间，工作生活娱乐的时间分配，以及效率的提高，都需要我们学会管理自己。所以，管理时间的本质还是管理自己  </p>

<p>review了《暗时间》、《程序员的思维修炼》、《如何把事情做到最好》，看的书不算少，但是进步的幅度却很小。在学习的平台期，我总是没有足够的耐心度过去，不坚持持续练习，这也是我比较严重的问题之一。这也是导致我大学四年下来，没有学成扎实的功夫，没有储备好扎实牢固的知识，一事无成的主要原因。然而大脑的天性是遗忘痛苦，那些尴尬，那些非致命性的痛苦很快就被遗忘，你便会一次次原谅自己，之后你就如“温水煮青蛙”般，永无进步，直到死去。可怕的不仅如此，而是你不知道这就发生在你身上，“吾日三省”说的就是这个道理，反省进而发现自身那些不易察觉的错误和缺陷，才最关键  </p>

<p>我很庆幸自己选择了计算机专业，学习该专业对自学能力，思考能力有着潜移默化的促进。互联网作为如今全球前沿性的热点，许多非计算机专业的人也涌入浪潮，没有自学能力和思考能力，即使是本专业学生也无法安全度过互联网的深水来到达彼岸。互联网的技术更新很快，终生学习被提出，如果你拒绝学习，你会虚度光阴；你选择了学习，终有一天你会用上这些。所以，最终的形态是：你优秀的自学能力配合着阅读能力，检索能力，写作能力，终将铸就你超强的实践能力  </p>

<p>每看一次关于自我管理或者思维的书，总觉得自己重生了一次，这次我又将充满激情，面对未来许多的未知，一定要保持耐心，坚信时间可以证明一切：  </p>

<blockquote>
<p>我要控制自己的大脑，我要翻身作大脑的主人，与懒惰抗争，坚持反省，拒绝原谅和遗忘（使用记录尴尬提醒自己）。没有突破不了的平台期，每天坚持看一点，就没有看不完的书，坚持积累才是最根本的学习策略，积极去做无趣却很重要的工作！  </p>
</blockquote>

<hr/>

<p>PS：  </p>

<p>今日读完李笑来的《把时间当作朋友》，有感而发，遂写此博客</p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[IMDB数据库结构]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/imdb-db-structure/"/>
        <updated>2016-01-15T17:00:00Z</updated>
        <published>2016-01-15T17:00:00Z</published>
        <id>http://sukai.me/imdb-db-structure/</id>
        <content type="html">
            <![CDATA[
             <p>想要获取IMDB已上映电影的相关信息数据，我立马想到的两点就是：Restful API和爬虫，但就在我google方案的过程中，我意外收获到了其他的东西：  </p>

<p>其中一个，是使用Python语言开发的<a href="http://imdbpy.sourceforge.net/index.html">IMDbPY</a>，它的作用就是帮助开发者取回和管理IMDb的电影数据库  </p>

<p>另外一个就是，IMDB网站其实提供了所有电影的数据库镜像：<a href="http://www.imdb.com/interfaces/">http://www.imdb.com/interfaces</a>  </p>

<p>顺着IMDbPy的文档，会发现一个非常实用的脚本：<a href="http://imdbpy.sourceforge.net/docs/README.sqldb.txt">imdbpy2sql.py</a>，它的作用就是将镜像文件转换为本地的数据库  </p>

<p>第一次使用，就顺着文档<a href="http://imdbpy.sourceforge.net/docs/README.sqldb.txt">http://imdbpy.sourceforge.net/docs/README.sqldb.txt</a>一步一步来，运行完脚本后，本地数据库（我用的Mysql）会得到一些IMDB的表和数据  </p>

<p>PS：下载所需的镜像文件，并运行imdbpy2sql.py脚本，我全部写成了自动化程序：  </p>
<div class="highlight"><pre><span class="c">#!/usr/bin/env python  </span>
<span class="c"># -*- coding: utf-8 -*-  </span>

<span class="kn">import</span> <span class="nn">subprocess</span>  
<span class="kn">import</span> <span class="nn">os</span>  
<span class="kn">import</span> <span class="nn">imdb</span>  

<span class="n">location</span> <span class="o">=</span> <span class="s">&#39;./dbfiles&#39;</span>  
<span class="n">imdb_script</span> <span class="o">=</span> <span class="s">&#39;./code/bin/imdbpy2sql.py&#39;</span>  
<span class="n">base_download_url</span> <span class="o">=</span> <span class="s">&#39;ftp://ftp.fu-berlin.de/pub/misc/movies/database/&#39;</span>  
<span class="n">to_download_files</span> <span class="o">=</span> <span class="p">[</span>  
    <span class="s">&#39;movie-links.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;keywords.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;directors.list.gz&#39;</span><span class="p">,</span>  
    <span class="s">&#39;editors.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;genres.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;language.list.gz&#39;</span><span class="p">,</span>  
    <span class="s">&#39;movies.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;producers.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;production-companies.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;ratings.list.gz&#39;</span><span class="p">,</span>  
    <span class="s">&#39;writers.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;countries.list.gz&#39;</span><span class="p">,</span> <span class="s">&#39;complete-cast.list.gz&#39;</span><span class="p">]</span>  

<span class="n">mysql_ip</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span>  
<span class="n">mysql_user</span> <span class="o">=</span> <span class="s">&#39;root&#39;</span>  
<span class="n">mysql_passwd</span> <span class="o">=</span> <span class="s">&#39;1227401054&#39;</span>  
<span class="n">mysql_db</span> <span class="o">=</span> <span class="s">&#39;mrp&#39;</span>  

<span class="k">def</span> <span class="nf">download_db_files</span><span class="p">():</span>  
    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">to_download_files</span><span class="p">:</span>  
        <span class="n">url</span> <span class="o">=</span> <span class="n">base_download_url</span> <span class="o">+</span> <span class="nb">file</span>  
        <span class="k">print</span> <span class="s">&#39;Downloading &#39;</span><span class="p">,</span> <span class="n">url</span>  
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;wget&#39;</span><span class="p">,</span> <span class="s">&#39;-P&#39;</span><span class="p">,</span> <span class="n">location</span><span class="p">,</span> <span class="n">url</span><span class="p">]</span>  
        <span class="n">t_pro</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>  
        <span class="c"># block model too slow  </span>
        <span class="c">#t_pro.wait()  </span>


<span class="k">def</span> <span class="nf">trans_db_to_local</span><span class="p">():</span>  
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>  
        <span class="n">allDone</span> <span class="o">=</span> <span class="bp">True</span>  
        <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">to_download_files</span><span class="p">:</span>  
            <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">location</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="nb">file</span><span class="p">):</span>  
                <span class="c">#print &#39;need file: &#39;, location+file  </span>
                <span class="n">allDone</span> <span class="o">=</span> <span class="bp">False</span>  
                <span class="k">break</span>  
        <span class="k">if</span> <span class="n">allDone</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>  
            <span class="k">break</span>  

    <span class="k">print</span> <span class="s">&#39;Running imdbpy2sql.py begin&#39;</span>  
    <span class="c"># mysql://user:password@host/database  </span>
    <span class="n">mysql_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;mysql://&#39;</span><span class="p">,</span> <span class="n">mysql_user</span><span class="p">,</span> <span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="n">mysql_passwd</span><span class="p">,</span> <span class="s">&#39;@&#39;</span><span class="p">,</span> <span class="n">mysql_ip</span><span class="p">,</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="n">mysql_db</span><span class="p">]</span>  
    <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">imdb_script</span> <span class="o">+</span> <span class="s">&#39; -d &#39;</span> <span class="o">+</span> <span class="n">location</span> <span class="o">+</span> <span class="s">&#39; -u &#39;</span> <span class="o">+</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">mysql_list</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; --mysql-force-myisam&#39;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  
    <span class="k">print</span> <span class="s">&#39;Running imdbpy2sql.py. over&#39;</span>  


<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>  
    <span class="n">download_db_files</span><span class="p">()</span>  
    <span class="n">trans_db_to_local</span><span class="p">()</span>  

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>  
    <span class="n">run</span><span class="p">()</span>
</pre></div>

<p>下面将分析IMDB的数据库结构，从中我们可以看出IMDB数据库设计的很好，数据高度结构化，数据表无冗余（PS：说来惭愧，平时我做开发，很喜欢一张表，这样写sql语句很方便，但是缺点真的很多），  </p>

<h3>title</h3>

<p>首先，最想找的就是电影名称了吧，它存储title表里的title字段中，除此之外，title表还有些重要的信息：id和kind_id，production_year，id代表该电影的全局唯一标识，production_year表示电影上映的年份，kind_id暂时不知道，那么可以找到kind_type表，  </p>

<p>kind_type表的信息如下：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_db_kind_type.png" width="170" height="200" align="center">  </p>

<p>我需要的是电影信息，那么就对应着kind_type为1的数据  </p>

<p>以id为2459950的电影为例子吧，在title中的数据如下：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_title_table_ex.png"  height="100" align="center" />  </p>

<p>从图中可以看到select出来的结果为：id为249950的电影名为After Words，上映时间为2015年  </p>

<p>在imdb网站搜索下该电影，链接为：<a href="http://www.imdb.com/title/tt2226630/">http://www.imdb.com/title/tt2226630/</a>  </p>

<h3>movie_info</h3>

<p>之后，我需要电影相关的info，比如：countries, languages, genres, votes, rating  </p>

<p>首先涉及到的表式：movie_info，通过‘SELECT * FROM mrp.movie_info where movie_id=2459950;’，得到上面‘After Words’电影的相关信息如下：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_movie_info_ex.png" width="700" height="150" align="center" />  </p>

<p>其中info_type_id不是很明白，找到info_type表，里面解释着各个id代表的含义：  </p>

<ul>
<li>id为3代表genres<br/></li>
<li>id为8代表countries<br/></li>
<li>id为4代表languages<br/></li>
</ul>

<p>结合截图select的结果，得知&#39;After Words&#39;的countries为USA，genres为Drama，languages为English  </p>

<h3>movie_info_id</h3>

<p>还有一些相关的info在movie_info_idx中，通过‘SELECT * FROM mrp.movie_info_idx where movie_id=2459950;’，得到如下结果：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_movie_info_idx_ex.png" width="680" height="150" align="center">  </p>

<p>相应的：  </p>

<ul>
<li>info_type_id为99代表votes distribution（这个数据值我暂时没搞懂）<br/></li>
<li>info_type_id为100代表votes<br/></li>
<li>info_type_id为101代表rating<br/></li>
</ul>

<h3>movie_keywords</h3>

<p>需要查找电影的keywords信息，就需要用到movie_keywords表了。‘SELECT * FROM mrp.movie_keyword where movie_id=2459950;’：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/movie_keywords_ex.png" width="350" height="200" align="center" />  </p>

<p>这样就可以找到电影所有的keywords_id，然后使用keywords_id去keywords表中寻找具体的值，即可：  </p>

<p>比如‘SELECT * FROM mrp.keyword where id=37348’得到的具体值为：costa-rica，这个和imdb官网是符合的，是正确的！  </p>

<h3>cast_info</h3>

<p>下面我们来找一下cast_info：cast, editor, writer, director, producer等，这些信息当然是在cast_info表中了，‘SELECT * FROM mrp.cast_info where movie_id=2459950;’:  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/cast_info_ex.png" width="700" height="700" align="center" />  </p>

<p>里面同样有个role_id，查阅role_type表：  </p>

<ul>
<li>role_id为1和2，分别代表actor和actress<br/></li>
<li>role_id为3，代表producer<br/></li>
<li>role_id为4，代表writer<br/></li>
<li>role_id为8，代表director<br/></li>
<li>rile_id为9，代表editor<br/></li>
</ul>

<p>那么如何找到具体的人名呢？通过person_id和name表，不多说，你可以试一下，再对照官网，可以发现信息是完全吻合的  </p>

<h3>movie_companies</h3>

<p>下面我们来找一下电影的production_companies，涉及到表为movie_companies，‘SELECT * FROM mrp.movie_companies where movie_id=2459950;’，之后会得到company_id  </p>

<p>拿着company_id去company_name里面即可找到具体公司名  </p>

<p>这里不再累述  </p>

<h3>额外信息</h3>

<p>还有一些额外的信息我需要知道：有关评分的信息，包括1~10评分的分布，女性评分占多少，男性多少，年龄段评分多少等等  </p>

<p>如<a href="http://www.imdb.com/title/tt2226630/ratings?ref_=tt_ov_rt">http://www.imdb.com/title/tt2226630/ratings?ref_=tt_ov_rt</a>所示  </p>

<p>方法是通过Imdbpy这个开源库里面的一个核心的函数：update，来完成（感谢东南大学杨远溢同学），他在这方面已经研究出方案了，我只需要站在他的基础上，编写程序即可  </p>

<p>实例程序如下：（搜索&quot;A Father&#39;s Journey&quot;电影，并获取评分信息）  </p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">imdb</span>  

<span class="k">def</span> <span class="nf">init_db</span><span class="p">():</span>  
    <span class="n">title</span> <span class="o">=</span> <span class="s">&quot;A Father&#39;s Journey&quot;</span>  
    <span class="n">ia</span> <span class="o">=</span> <span class="n">imdb</span><span class="o">.</span><span class="n">IMDb</span><span class="p">()</span>  
    <span class="n">s_result</span> <span class="o">=</span> <span class="n">ia</span><span class="o">.</span><span class="n">search_movie</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>  
    <span class="sd">&#39;&#39;&#39;  </span>
<span class="sd">    for item in s_result:  </span>
<span class="sd">        print item[&#39;title&#39;]  </span>
<span class="sd">    &#39;&#39;&#39;</span>  
    <span class="n">the_unt</span> <span class="o">=</span> <span class="n">s_result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  
    <span class="n">ia</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">the_unt</span><span class="p">,</span> <span class="n">info</span><span class="o">=</span><span class="p">(</span><span class="s">&#39;vote details&#39;</span><span class="p">))</span>  
    <span class="k">if</span> <span class="n">the_unt</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;rating&#39;</span><span class="p">):</span>  
        <span class="k">print</span> <span class="n">the_unt</span><span class="p">[</span><span class="s">&#39;rating&#39;</span><span class="p">]</span>  
    <span class="k">if</span> <span class="n">the_unt</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;number of votes&#39;</span><span class="p">):</span>  
        <span class="n">number_votes</span> <span class="o">=</span> <span class="n">the_unt</span><span class="p">[</span><span class="s">&#39;number of votes&#39;</span><span class="p">]</span>  
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>  
            <span class="k">print</span> <span class="s">&#39;R&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="n">number_votes</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>  
    <span class="k">if</span> <span class="n">the_unt</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&#39;demographic&#39;</span><span class="p">):</span>  
        <span class="n">infos</span> <span class="o">=</span> <span class="p">[</span>  
            <span class="s">&#39;males&#39;</span><span class="p">,</span> <span class="s">&#39;females&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged under 18&#39;</span><span class="p">,</span> <span class="s">&#39;males under 18&#39;</span><span class="p">,</span> <span class="s">&#39;females under 18&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged 18-29&#39;</span><span class="p">,</span> <span class="s">&#39;males aged 18-29&#39;</span><span class="p">,</span> <span class="s">&#39;females aged 18-29&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged 30-44&#39;</span><span class="p">,</span> <span class="s">&#39;males aged 30-44&#39;</span><span class="p">,</span> <span class="s">&#39;females aged 30-44&#39;</span><span class="p">,</span>  
            <span class="s">&#39;aged 45+&#39;</span><span class="p">,</span> <span class="s">&#39;males aged 45+&#39;</span><span class="p">,</span> <span class="s">&#39;females aged 45+&#39;</span><span class="p">,</span>  
            <span class="s">&#39;imdb staff&#39;</span><span class="p">,</span> <span class="s">&#39;top 1000 voters&#39;</span><span class="p">,</span>  
            <span class="s">&#39;us users&#39;</span><span class="p">,</span><span class="s">&#39;non-us users&#39;</span>  
        <span class="p">]</span>  
        <span class="n">demo_value</span> <span class="o">=</span> <span class="n">the_unt</span><span class="p">[</span><span class="s">&#39;demographic&#39;</span><span class="p">]</span>  
        <span class="k">print</span> <span class="s">&#39;get&#39;</span>  
        <span class="k">for</span> <span class="n">in_fo</span> <span class="ow">in</span> <span class="n">infos</span><span class="p">:</span>  
            <span class="k">if</span> <span class="n">demo_value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">in_fo</span><span class="p">)</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="k">print</span> <span class="n">in_fo</span><span class="p">,</span> <span class="n">demo_value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">in_fo</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">demo_value</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">in_fo</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</pre></div>

<h3>总结</h3>

<p>IMDB提供数据的方式确实很独特，通过镜像的方式。通过分析所有的表结构，不难发现imdb数据库设计之好  </p>

<p>好了，截止目前，imdb的未上映和已上映电影数据就都可以拿到了  </p>

            ]]>
        </content>
    </entry>
    
    <entry>
        <title><![CDATA[IMDB电影数据库]]></title>
        <author><name>SuKai</name><uri>http://sukai.me/</uri></author>
        <link href="http://sukai.me/imdb-movies-crawl/"/>
        <updated>2016-01-15T12:00:00Z</updated>
        <published>2016-01-15T12:00:00Z</published>
        <id>http://sukai.me/imdb-movies-crawl/</id>
        <content type="html">
            <![CDATA[
             <p>IMDB拥有着全球最大的电影数据库，最近我也在研究如何获取到这些宝贵的电影数据资源  </p>

<p>根据时间来划分，可以将所有的电影分为：已上映和未上映。下面我将分这两种情况，分别去寻找方案  </p>

<h3>未上映电影数据</h3>

<p>在IMDB官网，我找到了一些有趣的页面：<a href="http://www.imdb.com/movies-coming-soon/2016-01">http://www.imdb.com/movies-coming-soon/2016-01</a>，<a href="http://www.imdb.com/movies-coming-soon/2016-02">http://www.imdb.com/movies-coming-soon/2016-02</a>等等，通过分析url很容易发现：  </p>

<p>url中的&#39;movies-coming-soon&#39;表示该页面的电影即将上映至影院，后面的日期为2016-xx，代表着该页面的电影预计2016年xx月上映  </p>

<p>这样的话，我们就可以找到2016一整年的预映电影的入口页面  </p>

<p>随意进入任何一个入口页面，里面陈列着该日期下所有预映电影的简短信息，包括指向某具体电影详情页面的link，随意点击某部电影，进入并得到link，比如：<a href="http://www.imdb.com/title/tt3460252/?ref_=cs_ov_tt">http://www.imdb.com/title/tt3460252/?ref_=cs_ov_tt</a>  </p>

<p>其中?ref<em>=cs_ov_tt是多余的，可以省略，于是link精简为：<a href="http://www.imdb.com/title/tt3460252">http://www.imdb.com/title/tt3460252</a>，‘?ref</em>=cs_ov_tt’只是代表某些跳转信息（我猜的）  </p>

<p>进入到电影详情页面，我们就可以抓取一切我们想要的数据了，原理很简单：  </p>

<p>模拟http请求，然后解析HTML DOM树，主要用到了Python的request库和beautifulSoup4库，我还用到了阻塞队列Queue和多线程，解析电影详情页面的线程代码如下：  </p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">detail_thread</span><span class="p">():</span>  
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>  
        <span class="k">try</span><span class="p">:</span>  
            <span class="n">m_url</span> <span class="o">=</span> <span class="n">movie_url</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>  
            <span class="k">print</span> <span class="s">&#39;detail_thread fetch: &#39;</span><span class="p">,</span> <span class="n">m_url</span>  
            <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">m_url</span><span class="p">)</span>  
            <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>  
            <span class="n">nMovie</span> <span class="o">=</span> <span class="n">newMovie</span><span class="p">()</span>  

            <span class="c"># id  </span>
            <span class="n">nMovie</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">m_url</span><span class="p">[</span><span class="n">m_url</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s">&#39;/tt&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="p">:]</span>  
            <span class="c"># year  </span>
            <span class="n">nMovie</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">year</span>  

            <span class="c"># title  </span>
            <span class="n">nMovie</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h1&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;header&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;name&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">text</span>  

            <span class="n">title_details</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;div&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="s">&#39;titleDetails&#39;</span><span class="p">})</span>  
            <span class="n">txt_block</span> <span class="o">=</span> <span class="n">title_details</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;div&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;txt-block&#39;</span><span class="p">})</span>  
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">txt_block</span><span class="p">:</span>  
                <span class="k">try</span><span class="p">:</span>  
                    <span class="c"># countries  </span>
                    <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">&#39;Country:&#39;</span><span class="p">:</span>  
                        <span class="n">c_links</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">c_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                            <span class="n">country</span> <span class="o">=</span> <span class="n">c_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">c_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                                <span class="n">country</span> <span class="o">=</span> <span class="n">country</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">text</span>  
                            <span class="n">nMovie</span><span class="o">.</span><span class="n">countries</span> <span class="o">=</span> <span class="n">country</span>  
                    <span class="c"># languages  </span>
                    <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">&#39;Language:&#39;</span><span class="p">:</span>  
                        <span class="n">l_links</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">l_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                            <span class="n">lan</span> <span class="o">=</span> <span class="n">l_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                            <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">l_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                                <span class="n">lan</span> <span class="o">=</span> <span class="n">lan</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">l</span><span class="o">.</span><span class="n">text</span>  
                            <span class="n">nMovie</span><span class="o">.</span><span class="n">languages</span> <span class="o">=</span> <span class="n">lan</span>  
                    <span class="c"># production_companies  </span>
                    <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;h4&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">&#39;Production Co:&#39;</span><span class="p">:</span>  
                        <span class="n">p_c_links</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">p_c_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                            <span class="n">p_companies</span> <span class="o">=</span> <span class="n">p_c_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                            <span class="k">for</span> <span class="n">p_c</span> <span class="ow">in</span> <span class="n">p_c_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                                <span class="n">p_companies</span> <span class="o">=</span> <span class="n">p_companies</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">p_c</span><span class="o">.</span><span class="n">text</span>  
                            <span class="n">nMovie</span><span class="o">.</span><span class="n">production_companies</span> <span class="o">=</span> <span class="n">p_companies</span>  
                <span class="k">except</span><span class="p">:</span>  
                    <span class="k">continue</span>  
                    <span class="c">#print &#39;detail_thread: txt_block find no h4 tag&#39;  </span>

            <span class="c"># keywords  </span>
            <span class="n">keywords</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;keywords&#39;</span><span class="p">,</span> <span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">})</span>  
            <span class="c">#print m_url, &#39; keywords:&#39;, len(keywords)  </span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">keywords</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                <span class="n">key_words</span> <span class="o">=</span> <span class="n">keywords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keywords</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                    <span class="n">key_words</span> <span class="o">=</span> <span class="n">key_words</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">k</span><span class="o">.</span><span class="n">text</span>  
                <span class="n">nMovie</span><span class="o">.</span><span class="n">keywords</span> <span class="o">=</span> <span class="n">key_words</span>  

            <span class="c"># genres  </span>
            <span class="n">genres_div</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;see-more inline canwrap&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;genre&#39;</span><span class="p">})</span>  
            <span class="k">if</span> <span class="n">genres_div</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="n">g_links</span> <span class="o">=</span> <span class="n">genres_div</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                <span class="c">#print m_url, &#39; genres:&#39;, len(g_links)  </span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">g_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                    <span class="n">genres</span> <span class="o">=</span> <span class="n">g_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">g_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                        <span class="n">genres</span> <span class="o">=</span> <span class="n">genres</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">g</span><span class="o">.</span><span class="n">text</span>  
                    <span class="c">#print genres  </span>
                    <span class="n">nMovie</span><span class="o">.</span><span class="n">genres</span> <span class="o">=</span> <span class="n">genres</span>  

            <span class="c"># cast  </span>
            <span class="n">cast_td</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;actor&#39;</span><span class="p">})</span>  
            <span class="c">#print m_url, &#39; cast:&#39;, len(cast_td)  </span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">cast_td</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                <span class="n">casts</span> <span class="o">=</span> <span class="n">cast_td</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;name&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">text</span>  
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cast_td</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                    <span class="n">casts</span> <span class="o">=</span> <span class="n">casts</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;itemprop&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;name&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">text</span>  
                <span class="c">#print casts  </span>
                <span class="n">nMovie</span><span class="o">.</span><span class="n">cast</span> <span class="o">=</span> <span class="n">casts</span>  

            <span class="c"># ??  </span>
            <span class="c"># editor  </span>
            <span class="c"># producer  </span>

            <span class="c"># writer  </span>
            <span class="n">w_div</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;txt-block&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;creator&#39;</span><span class="p">})</span>  
            <span class="k">if</span> <span class="n">w_div</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="n">w_links</span> <span class="o">=</span> <span class="n">w_div</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                <span class="c">#print m_url, &#39; writer:&#39;, len(w_links)  </span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">w_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                    <span class="n">writer</span> <span class="o">=</span> <span class="n">w_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                    <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">w_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                        <span class="n">writer</span> <span class="o">=</span> <span class="n">writer</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">w</span><span class="o">.</span><span class="n">text</span>  
                    <span class="n">nMovie</span><span class="o">.</span><span class="n">writer</span> <span class="o">=</span> <span class="n">writer</span>  
                <span class="c">#print nMovie.writer  </span>

            <span class="c"># director  </span>
            <span class="n">d_div</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;txt-block&#39;</span><span class="p">,</span> <span class="s">&#39;itemprop&#39;</span><span class="p">:</span> <span class="s">&#39;director&#39;</span><span class="p">})</span>  
            <span class="k">if</span> <span class="n">d_div</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>  
                <span class="n">d_links</span> <span class="o">=</span> <span class="n">d_div</span><span class="o">.</span><span class="n">findAll</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>  
                <span class="c">#print m_url, &#39; director:&#39;, len(d_links)  </span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">d_links</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  
                    <span class="n">director</span> <span class="o">=</span> <span class="n">d_links</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span>  
                    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">d_links</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>  
                        <span class="n">director</span> <span class="o">=</span> <span class="n">director</span> <span class="o">+</span> <span class="s">&#39;:&#39;</span> <span class="o">+</span> <span class="n">d</span><span class="o">.</span><span class="n">text</span>  
                    <span class="n">nMovie</span><span class="o">.</span><span class="n">director</span> <span class="o">=</span> <span class="n">director</span>  

            <span class="n">entities</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">nMovie</span><span class="p">)</span>  
            <span class="n">movie_url</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>  
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>  
            <span class="k">print</span> <span class="s">&#39;detail_thread: An {} exception occured&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</pre></div>

<p>当然，在运行detail_thread这个线程之前，肯定要开启另外一个线程，作用是将所有电影详情页面的url放入movie_url这个Queue中，否则，detail_thread永远阻塞至死。所以，总的来设计，我运用了多线程+多队列搭建起了‘多级生产者和消费者’模型：  </p>

<p><img src="http://7xl2fd.com1.z0.glb.clouddn.com/imdb_new_movie_crawl_model.png" width="400" height="400" align="center" />  </p>

<p>index_thread生产所有入口页面，放入index_url阻塞队列；movie_thread从index_url队列取入口页面，生产电影详情页面url，放入movie_url；detail_thread从movie_url获取link，解析生成nMovie的实体，实体中保存着有关电影的详细信息，放入entitie队列；最后交由db_thread做入库持久化操作  </p>

<p>运行时，可以视实际运行快慢，给其中的某些线程增加数量，增快其运行速度  </p>

<p>总的代码，可以查看我的<a href="https://github.com/su-kaiyao/mrp/blob/master/dataSet/newMovieCrawl.py">Github&gt;newMovieCrawl.py</a>  </p>

<p>我自己运行了一把，抓了141条新电影，查阅了所有入口页面（2016-01 ~ 2016-12），数了数是145个，少了4个，是因为那4个电影的详细信息太少了，被脚本过滤了  </p>

<h3>已上映电影数据</h3>

<p>移步：<a href="http://sukai.me/imdb-db-structure/">IMDB数据库结构</a>  </p>

            ]]>
        </content>
    </entry>
    
</feed>